// Mixins encourage code reuse and can be used to avoid 
// the inheritance ambiguity that multiple inheritance can cause
/** 
*** Contents
*** 01 - input-placeholder 
*** 02 - retina
**/ 

// 01 - input-placeholder 
// Usage: https://gist.github.com/waltercraig/277cbb2d1eec33a29b3aa4ac6c5d0d18
@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

// 02 - retina
// Usage: https://gist.github.com/waltercraig/5d05b1a66743f3dd9245bee97ac71b99
@mixin retina($image, $extension, $position: center, $repeat: no-repeat) {
    background: url($image + '.' + $extension) $repeat $position;
         
    @media 
    screen and (-webkit-min-device-pixel-ratio: 2),
    screen and (   min--moz-device-pixel-ratio: 2),
    screen and (   -moz-min-device-pixel-ratio: 2),
    screen and (     -o-min-device-pixel-ratio: 2/1),
    screen and (        min-device-pixel-ratio: 2),
    screen and (             min-resolution: 192dpi), 
    screen and (             min-resolution: 2dppx) {    
       background: url($image + '@2x' + '.' + $extension) $repeat $position;
       background-size: $width $height;
    }
}

// 03 - breakpoints
// Usage: https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint 
/// @require $breakpoints

@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// 04 - convert font size from pixel to rem
// Note: This assumes you are calculating from a mobile base of 14px if you prefer to convert from a desktop base of 16px change the "Calculate Rem" function in _functions
// Usage: 
@mixin fontSize($size) {
    font-size: calculateRem($size);
}